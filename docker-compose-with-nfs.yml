version: '2'

### Applications Code Container #################################
services:

    ### Empty shell Containers ##################################
    application:
        container_name: base
        image: tianon/true
        volumes:
            - ${MOUNT}/${WEB_ROOT}:/var/www/sites:rw

    ### Workspace Container #####################################
    workspace:
        container_name: workspace
        build:
            context: ./workspace
            args:
                - PUID=${PUID}
                - PGID=${PGID}
                - LOCAL_USER=${LOCAL_USER}
                - GIT_NAME=${GIT_NAME}
                - GIT_EMAIL=${GIT_EMAIL}
                - BIN_PATH=/usr/local/bin/
        volumes_from:
            - application
        volumes:
            - ${MOUNT}/workspace/etc/php:/etc/php:rw
            - ${MOUNT}/workspace/home/local_user:/home/${LOCAL_USER}:rw
        networks:
            - vlan0
        tty: true

    ### Nginx Server Container ##################################
    nginx:
        container_name: nginx
        build:
            context: ./nginx
            args:
                - DEV_ENVIRONMENT=${DEV_ENVIRONMENT}
        ports:
            - "80:80"
            - "443:443"
        volumes_from:
            - application
        volumes:
            # important! mounting a single file (rather than a directory) only works if the target file on the host already exists!
            # Docker will otherwise assume a directory (if it not yet exists, Docker will attempt to create it - deprecated behaviour!) and the container won't build
            - ${MOUNT}/_data/logs/nginx:/var/log/nginx:rw
            - ${MOUNT}/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
            - ${MOUNT}/nginx/upstream.conf:/etc/nginx/conf.d/upstream.conf:ro
            - ${MOUNT}/nginx/certs/:/etc/ssl/certs/custom/:ro
            - ${MOUNT}/nginx/sites-available/:/etc/nginx/sites-available/:ro
            - ${MOUNT}/nginx/snippets/:/etc/nginx/snippets/:ro
            - ${MOUNT}/nginx/entrypoint.sh:/usr/bin/entrypoint.sh/:ro
        entrypoint: /usr/bin/entrypoint.sh
        networks:
            - vlan0

    ### PHP-FPM Containers ######################################
    php56-fpm:
        container_name: php56-fpm
        build:
            context: ./php/5.6
            args:
                - DEV_ENVIRONMENT=${DEV_ENVIRONMENT}
                - PHP_FPM_INSTALL_XDEBUG=${PHP_FPM_INSTALL_XDEBUG}
                - PHP_FPM_INSTALL_MEMCACHED=${PHP_FPM_INSTALL_MEMCACHED}
        volumes_from:
            - application
        volumes:
            # important! mounting a single file (rather than a directory) only works if the target file on the host already exists!
            # Docker will otherwise assume a directory and the container won't build
            - ${MOUNT}/_data/logs/php/php56-fpm.log:/var/log/php-fpm.log:rw
            - ${MOUNT}/_data/logs/php/php56-opcache.log:/var/log/php-opcache.log:rw
            - ${MOUNT}/php/5.6/www.conf:/usr/local/etc/php-fpm.d/www.conf:ro
            - ${MOUNT}/php/5.6/php.ini:/usr/local/etc/php/conf.d/php.ini:ro
            # not necessary if PHP_FPM_INSTALL_XDEBUG = false, but currently there is no way to wrap this in an if-statement
            - ${MOUNT}/php/5.6/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini:ro
            - ${MOUNT}/php/5.6/opcache.ini:/usr/local/etc/php/conf.d/opcache.ini:ro
            - ${MOUNT}/php/entrypoint.sh:/usr/bin/entrypoint.sh/:ro
        entrypoint: /usr/bin/entrypoint.sh
        networks:
            - vlan0

    php70-fpm:
        container_name: php70-fpm
        build:
            context: ./php/7.0
            args:
                - DEV_ENVIRONMENT=${DEV_ENVIRONMENT}
                - PHP_FPM_INSTALL_XDEBUG=${PHP_FPM_INSTALL_XDEBUG}
                - PHP_FPM_INSTALL_MEMCACHED=${PHP_FPM_INSTALL_MEMCACHED}
        volumes_from:
            - application
        volumes:
            # important! mounting a single file (rather than a directory) only works if the target file on the host already exists!
            # Docker will otherwise assume a directory and the container won't build
            - ${MOUNT}/_data/logs/php/php70-fpm.log:/var/log/php-fpm.log:rw
            - ${MOUNT}/_data/logs/php/php70-opcache.log:/var/log/php-opcache.log:rw
            - ${MOUNT}/php/7.0/www.conf:/usr/local/etc/php-fpm.d/www.conf:ro
            - ${MOUNT}/php/7.0/php.ini:/usr/local/etc/php/conf.d/php.ini:ro
            # not necessary if PHP_FPM_INSTALL_XDEBUG = false, but currently there is no way to wrap this in an if-statement
            - ${MOUNT}/php/7.0/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini:ro
            - ${MOUNT}/php/7.0/opcache.ini:/usr/local/etc/php/conf.d/opcache.ini:ro
            - ${MOUNT}/php/entrypoint.sh:/usr/bin/entrypoint.sh/:ro
        entrypoint: /usr/bin/entrypoint.sh
        networks:
            - vlan0

    php71-fpm:
        container_name: php71-fpm
        build:
            context: ./php/7.1
            args:
                - DEV_ENVIRONMENT=${DEV_ENVIRONMENT}
                - PHP_FPM_INSTALL_XDEBUG=${PHP_FPM_INSTALL_XDEBUG}
                - PHP_FPM_INSTALL_MEMCACHED=${PHP_FPM_INSTALL_MEMCACHED}
        volumes_from:
            - application
        volumes:
            # important! mounting a single file (rather than a directory) only works if the target file on the host already exists!
            # Docker will otherwise assume a directory and the container won't build
            - ${MOUNT}/_data/logs/php/php71-fpm.log:/var/log/php-fpm.log:rw
            - ${MOUNT}/_data/logs/php/php71-opcache.log:/var/log/php-opcache.log:rw
            - ${MOUNT}/php/7.1/www.conf:/usr/local/etc/php-fpm.d/www.conf:ro
            - ${MOUNT}/php/7.1/php.ini:/usr/local/etc/php/conf.d/php.ini:ro
            # not necessary if PHP_FPM_INSTALL_XDEBUG = false, but currently there is no way to wrap this in an if-statement
            - ${MOUNT}/php/7.1/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini:ro
            - ${MOUNT}/php/7.1/opcache.ini:/usr/local/etc/php/conf.d/opcache.ini:ro
            - ${MOUNT}/php/entrypoint.sh:/usr/bin/entrypoint.sh/:ro
        entrypoint: /usr/bin/entrypoint.sh
        networks:
            - vlan0

    ### MariaDB Container #######################################
    mariadb:
        container_name: mariadb
        build:
            context: ./mariadb
            args:
                - DEV_ENVIRONMENT=${DEV_ENVIRONMENT}
        environment:
            MYSQL_USER: ${MYSQL_USER}
            MYSQL_PASSWORD: ${MYSQL_PASSWORD}
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
        ports:
            - "3306:3306"
        volumes:
            - ${MOUNT}/_data/logs/mariadb/mysql.log:/var/log/mysql.log:rw
            - ${MOUNT}/_data/logs/mariadb/mysql.err:/var/log/mysql.err:rw
            - ${MOUNT}/_data/logs/mariadb/mysql:/var/log/mysql:rw
            - ${MOUNT}/_data/mysql:/var/lib/mysql:rw   # mysql data directory
            - ${MOUNT}/mariadb/etc/mysql:/etc/mysql:ro # config directory
            - ${MOUNT}/mariadb/entrypoint.sh:/usr/bin/entrypoint.sh:ro
        entrypoint: /usr/bin/entrypoint.sh
        networks:
            vlan0:
                ipv4_address: 172.19.0.255

### Networks Setup ##############################################
networks:
    vlan0:
        driver: bridge
        ipam:
            config:
                - subnet: 172.19.0.0/24

### Volumes Setup ###############################################
volumes:
    mariadb:
        driver: "local"
